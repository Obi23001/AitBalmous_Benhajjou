package exercices;

import java.util.Arrays;
import static java.util.Comparator.comparing;
import java.util.List;
import java.util.OptionalInt;
import java.util.stream.Stream;
import static exercices.Member.Type;
import static exercices.Member.members;

public class TestMember {

	public static void main(String[] args) {
		// 1.Sélectionner les membres ayant l’ « handicap » supérieur à 20 ;
		System.out.println("******************HandicapMembers > 20******************");
		List<Member> handicapMembers = members.stream()
				.sorted((m1,m2)->m1.getHandicap()-m2.getHandicap())
				.takeWhile(member -> member.getHandicap() < 20)
				.toList();
		handicapMembers.forEach(m->System.out.println(m));
		// 2.Sélectionner les noms (LastName) des « Members »  jouant dans TeamA ; 
		System.out.println("******************TeamA LastNames***********************");
		List<String> teamA = members.stream()
				    .filter(m -> m.getTeam() == "TeamA")
					.map(m->m.getLastName())
					.toList();
		teamA.forEach(m->System.out.println(m));
		// 3.Sélectionner les noms (LastName) des « Members» de « Gender » =F ;
		System.out.println("******************Female Members*************************");
		List<String>  femaleMembers= members.stream()
				.filter(m -> m.getGender() == 'F')
				.map(m->m.getLastName())
				.toList();
		femaleMembers.forEach(m->System.out.println(m));
		// 4.Trier les « Members» de type « Junior » en fonction de leur « handicap » ;
		System.out.println("******************Junio Members**************************");
		List<Member> junior = members.stream()
				.filter(m -> m.getType() == Type.Junior)
				.sorted((m1,m2)->m1.getHandicap()-m2.getHandicap())
				.toList();
		junior.forEach(m->System.out.println(m));
		// 5.Tier les « Members» jouant dans « TeamA » en fonction de leur nom (lastName) ;
		System.out.println("******************TeamA Sorted**************************");
		List<String> sortedTeamA = members.stream()
				.filter(m -> m.getTeam() == "TeamA")
				//.sorted((m1,m2)->m1.getLastName().equals(m2.getLastName()))
				.sorted(comparing(Member::getLastName))
				.map(m->m.getLastName())
				.toList();
		sortedTeamA.forEach(m->System.out.println(m));
		// 6.Sélectionner les types (type) des « Members » jouant dans l’équipe « TeamC » ;
		System.out.println("******************Type TeamC**************************");
		 		members.stream()
				.filter(m -> m.getTeam() == "TeamC")
				.map(m->m.getType())
				.forEach(m->System.out.println(m));
		// 7.Sélectionner les noms (LastName) des « Members» de type « Senior » jouant dans « TeamB » ;	
		 System.out.println("******************Senior Members of TeamB*************");
		 		List<String> Senior = members.stream()
						.filter(m -> m.getType() == Type.Senior && m.getTeam() == "TeamB") 
						.map(Member::getLastName)
						.toList();
				Senior.forEach(m->System.out.println(m));	
		// 8.Renvoyer le maximum des handicaps ;
		System.out.println("******************Max handicaps************************");
		int maxHandicap = members.stream()
						.mapToInt(Member::getHandicap)
						.max()
						.getAsInt();
		System.out.println(maxHandicap);
		// 9.Renvoyer le minimum des handicaps ;
		System.out.println("******************Min handicaps*************************");
		int minHandicap = members.stream()
				.mapToInt(Member::getHandicap)
				.min()
				.getAsInt();
		System.out.println(minHandicap);
		// 10. Y'a t-il un membre jouant dans l'équipe TeamC et ayant un handicap >20 ;
		System.out.println("******************Does handicap > 20 exist in TeamC******");
		boolean handicapExist = members.stream()
							.filter(m -> m.getHandicap() > 20 && m.getTeam() == "TeamC")
							.toList()
							.isEmpty();
//		if(handicapExist.isEmpty())
//			System.out.println(false);
//		else
//			System.out.println(true);
		
	}


}
